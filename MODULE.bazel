# Copyright (c) Outernet Council and Contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module(name = "org_outernetcouncil_nmts")

bazel_dep(
    name = "gazelle",
    version = "0.40.0",
)

bazel_dep(
    name = "googleapis",
    version = "0.0.0-20240819-fe8ba054a",
)

bazel_dep(
    name = "protobuf",
    version = "29.1",
)

bazel_dep(
    name = "rules_go",
    version = "0.57.0",
)

bazel_dep(
    name = "grpc",
    version = "1.66.0.bcr.2",
)

bazel_dep(
    name = "rules_proto_grpc_cpp",
    version = "5.0.1",
)

bazel_dep(
    name = "rules_proto_grpc_java",
    version = "5.0.1",
)

bazel_dep(
    name = "rules_proto_grpc_python",
    version = "5.0.1",
)

bazel_dep(
    name = "rules_rust",
    version = "0.63.0",
)

bazel_dep(
    name = "rules_rust_prost",
    version = "0.63.0",
)

bazel_dep(
    name = "toolchains_protoc",
    version = "0.3.7",
)

bazel_dep(
    name = "toolchains_llvm",
    version = "1.4.0",
)

# Configure the protoc toolchain used by rules_proto_grpc to use protoc v28.0.
# This ensures that the version agrees with the protobuf dependency version,
# which is necessary because Protobuf C++ requires an exact match between its
# generated code version and its runtime version.
# (https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp)
protoc = use_extension("@toolchains_protoc//protoc:extensions.bzl", "protoc")

protoc.toolchain(
    google_protobuf = "com_google_protobuf",
    version = "v29.1",
)

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

go_sdk.download(
    version = "1.25.3",
)

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")

go_deps.from_file(go_mod = "//:go.mod")

use_repo(
    go_deps,
    "com_github_deckarep_golang_set_v2",
    "com_github_google_go_cmp",
    "com_github_ichiban_prolog",
    "com_github_samber_lo",
    "com_github_urfave_cli_v2",
    "org_golang_google_genproto",
    "org_golang_google_protobuf",
    "org_golang_x_text",
)

switched_rules = use_extension("@googleapis//:extensions.bzl", "switched_rules")

switched_rules.use_languages(
    cc = True,
    java = True,
    python = True,
)

# For TypeScript targets.
bazel_dep(
    name = "aspect_rules_js",
    version = "2.1.0",
)

bazel_dep(
    name = "rules_nodejs",
    version = "6.3.1",
)

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")

node.toolchain()

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")

npm.npm_translate_lock(
    name = "npm_nmts",
    npmrc = "@@//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
)

use_repo(npm, "npm_nmts")

bazel_dep(
    name = "aspect_rules_ts",
    version = "3.7.0",
)

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)

rules_ts_ext.deps(
    # The integrity value will need to be updated along with typescript version changes in package.json.
    # `curl --silent https://registry.npmjs.org/typescript/5.4.5 | jq -r '.dist.integrity'`
    ts_integrity = "sha512-vcI4UpRgg81oIRUFwR0WSIHKt11nJ7SAVlYNIu+QpqeyXP+gpQJy/Z4+F0aGxSE4MqwjyXvW/TzgkLAx2AGHwQ==",
    ts_version_from = "//:package.json",
)

use_repo(rules_ts_ext, "npm_typescript")

##
# TODO: extract Rust config to separate location for cleanliness.
##

#llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")

# LLVM Versions and platforms
# https://github.com/bazel-contrib/toolchains_llvm/blob/master/toolchain/internal/llvm_distributions.bzl

# Host LLVM toolchain.
#llvm.toolchain(
#    name = "llvm_toolchain",
#    llvm_version = "20.1.2",
#)
#use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")

#register_toolchains("@llvm_toolchain//:all")

RUST_EDITION = "2024"

RUST_VERSION = "1.89.0"

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")

rust.toolchain(
    edition = RUST_EDITION,
    versions = [RUST_VERSION],
)

use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

# Custom Prost toolchain
register_toolchains(
    "//build_tools/prost_toolchain",
)

crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")

crate.from_cargo(
    name = "crates_io",
    cargo_lockfile = "//:Cargo.lock",
    manifests = ["//:Cargo.toml"],
)

crate.annotation(
    crate = "protoc-gen-prost",
    gen_binaries = ["protoc-gen-prost"],
)

use_repo(crate, "crates_io")

crate.spec(
    package = "protoc-gen-tonic",
    version = "0.4.0",
)

crate.annotation(
    crate = "protoc-gen-tonic",
    gen_binaries = ["protoc-gen-tonic"],
)

crate.from_specs()

use_repo(crate, "crates")
