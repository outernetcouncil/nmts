// Copyright (c) Outernet Council and Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package nmts.types.ietf;

import "proto/types/ietf/common.proto";
import "proto/types/ietf/inet.proto";

option java_package = "org.outernetcouncil.nmts.proto.types.ietf";

// Some types derived from "ietf-routing-types" YANG module;
// see [RFC 6991](https://rfc-editor.org/rfc/rfc8294).

// From RFC 6991 [Section 3](https://rfc-editor.org/rfc/rfc8294#section-3):
//
//    "An unsigned 32-bit number expressed in the dotted-quad
//     notation, i.e., four octets written as decimal numbers
//     and separated with the '.' (full stop) character."
//
// See also:
//    * [OSPFv2](https://rfc-editor.org/rfc/rfc2328#section-1.2)
//    * [OSPFv3](https://rfc-editor.org/rfc/rfc5340#section-2.11)
//
// IS-IS identifiers may be much larger, but 4-octet conventions and
// uses are common practice, e.g.:
//    * [IS-IS for IP](https://rfc-editor.org/rfc/rfc1195#section-3.3)
//    * [IS-IS TE](https://rfc-editor.org/rfc/rfc5305#section-4.3)
//
// Note: "0.0.0.0" is commonly considered RESERVED in several router
// identification and configuration contexts and SHOULD NOT be used.
message RouterId {
  oneof type {
    DottedQuad dotted_quad = 1;
    uint32 u32 = 2;
  }
}

// A Segment Routing Architecture Segment Identifier (SID).
//
// One representation of a SID is as an index relative to a block of
// other identifiers. That representation is presently NOT RECOMMENDED
// here; all SIDs should be resolved to concrete data plane values
// prior to input to the model.
//
// It is not expected that networks would operate both SR-MPLS and
// SRv6 at the same time. Nevertheless, a router could conceivably
// "bridge" an SR-MPLS domain and an SRv6 domain (especially since
// an SRv6 domain can more easily span multiple administrative
// domains, whether advisable or not).
//
// Values for `mpls` fields are 20-bit unsigned integers. Zero (0),
// being reserved for the "IPv4 Explicit NULL Label", is not a valid
// SR-MPLS label value. See also:
//   https://rfc-editor.org/rfc/rfc3032#section-2.1
//   https://iana.org/assignments/mpls-label-values
//
// Values for `ipv6` fields may be any forwardable unicast IPv6
// address. Use of addresses from the IANA-reserved 5f00::/16 prefix
// is RECOMMENDED. Empty `IPv6Address` strings and the zero-value "::"
// are both invalid SRv6 SIDs. See also:
//   https://datatracker.ietf.org/doc/draft-ietf-6man-sids/
//   https://iana.org/assignments/iana-ipv6-special-registry
message SegmentId {
  uint32 mpls = 1;
  IPv6Address ipv6 = 2;
}

// MPLS Next Hop Label Forwarding Entry (NHLFE) operations
//
// From [RFC 8960](https://rfc-editor.org/rfc/rfc8960).
enum MplsOp {
  MPLS_OP_UNSPECIFIED = 0;
  MPLS_OP_IMPOSE_AND_FWD = 1;
  MPLS_OP_POP_AND_FWD = 2;
  MPLS_OP_POP_IMPOSE_AND_FWD = 3;
  MPLS_OP_SWAP_AND_FWD = 4;
  MPLS_OP_POP_AND_LOOKUP = 5;
}
