// Copyright (c) Outernet Council and Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///
// Coordinate, reference frame, and motion-related definitions.
///

syntax = "proto3";

package nmts.types.geophys;

import "google/protobuf/timestamp.proto";
import "google/type/interval.proto";
import "google/type/quaternion.proto";
import "proto/types/geophys/coordinates.proto";
import "proto/types/geophys/geodesy.proto";
import "proto/types/geophys/orbital.proto";

option java_package = "org.outernetcouncil.nmts.proto.types.geophys";

// A timestamped GeodeticWgs84 coordinate.
message GeodeticWgs84Temporal {
  GeodeticWgs84 point = 1;
  google.protobuf.Timestamp time = 2;
}

// A timestamped point in user-defined axes.
message PointAxesTemporal {
  PointAxes point_axes = 1;
  google.protobuf.Timestamp time = 2;
}

message InterpolationParameters {
  // Interpolation methods listed in increasing order of their ability to
  // fit complex functions.
  enum Method {
    METHOD_UNSPECIFIED = 0;

    // Uses linear interpolation. For reference, see:
    //
    //   https://en.wikipedia.org/wiki/Linear_interpolation
    METHOD_LINEAR = 1;

    // Uses a Lagrange interpolating polynomial.
    //
    // Conceptually, this method finds the lowest-order polynomial that
    // intersects each point. For reference, see:
    //
    //   https://en.wikipedia.org/wiki/Lagrange_polynomial
    METHOD_LAGRANGE = 2;

    // Uses a Hermite interpolating polynomial.
    //
    // Conceptually, this method finds the lowest-order polynomial that
    // not only intersects each point but also matches the derivatives
    // of the function. For reference, see:
    //
    //    https://en.wikipedia.org/wiki/Hermite_interpolation
    METHOD_HERMITIAN = 3;
  }
  Method method = 1;

  // The degree of the polynomial to use for interpolation.
  int32 interpolation_degree = 2;
}

// PointAxesTemporalInterpolation, GeodeticWgs84TemporalInterpolation, etc.
// specify a list of points and orientations over time. Both the
// translational and rotational coordinates are interpolated to calculate
// the position and orientation of the platform at a given timestamp. This
// is a natural choice to express the motion of platforms with a known
// trajectory, such as an aircraft, ship, or launch vehicle.
//
// These types may be used in conjunction with an application that
// periodically updates the motion of a platform. Imagine there is an
// airborne vehicle carrying a sensor that needs to constantly stream
// data to a Command Center, and an Ops Center that is tracking the
// position of this airbone vehicle. A lightweight script or binary can
// ingest the position observations from the Ops Center and then update
// the corresponding platform's position in real-time.
message PointAxesTemporalInterpolation {
  // If no axes are specified, the platform's axes will match the
  // Earth-centered, Earth-fixed reference frame.
  repeated PointAxesTemporal locations_orientations_over_time = 1;

  InterpolationParameters interpolation_params = 2;
}

// See above for notes on this type.
message GeodeticWgs84TemporalInterpolation {
  // The platform's axes are oriented in the Earth's reference frame, such that:
  //  - The x-axis points in the local East direction.
  //  - The y-axis points in the local North direction.
  //  - The z-axis points in the direction of the normal vector to the WGS 84
  //    ellipsoid surface which passes through the point. Conceptually,
  //    the z-axis is oriented "outwards" from the Earth's surface towards
  //    space.
  repeated GeodeticWgs84Temporal locations_over_time = 1;

  InterpolationParameters interpolation_params = 2;
}

message MotionDescription {
  // The time interval for which this motion specification is applicable.
  //
  // This may be left- or right-unbounded, or unspecified altogether. When
  // the start or end times (or both) are unspecified, and the motion
  // specification does not contain a clear indication of valid timestamps,
  // it is an error if an applicable boundary is required but cannot be
  // inferred from context (e.g., if there is more than one Motion message
  // in a sequence but the start/end time of one cannot be inferred from
  // the end/start time of another).
  google.type.Interval interval = 1;

  // When a platform's motion is described using message types that lack
  // an explicit indication of platform body axes, the platform's axes may
  // be assumed to be oriented in an axis system most commonly expected
  // for messages of the given type (e.g. COORDINATE_FRAME_ECEF and
  // East-North-Up, for some Earth-fixed location/motion message types).
  // More detailed information on implicit axis system is documented with
  // each message type.
  oneof type {
    GeodeticMsl geodetic_msl = 2;
    GeodeticWgs84 geodetic_wgs84 = 3;
    PointAxes ecef_fixed = 4;
    SelenographicMlr selenographic_mlr = 5;
    GeodeticWgs84TemporalInterpolation cartographic_waypoints = 6;
    PointAxesTemporalInterpolation ecef_interpolation = 7;
    TwoLineElementSet tle = 8;
    KeplerianElements keplerian_elements = 9;
    // WARNING: This message is under development and not fully supported.
    StateVector state_vector = 10;
    CcsdsOrbitEphemerisMessage ccsds_orbit_ephemeris_message = 11;
  }
}

// WARNING: This field is under development and not fully supported.
message Motion {
  // A list of MotionDescriptions over time, sorted by the `interval` of
  // applicability defined within each message.
  //
  repeated MotionDescription entry = 1;
}
