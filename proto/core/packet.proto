// Copyright (c) Outernet Council and Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package nmts.core;

import "proto/types/iana/ipproto.proto";
import "proto/types/ieee/ethertype.proto";
import "proto/types/ieee/ieee802.proto";
import "proto/types/ietf/common.proto";
import "proto/types/ietf/inet.proto";

option java_package = "org.outernetcouncil.nmts.proto.core";

// Some types inspired by the "ietf-packet-fields" and the
// "ietf-access-control-list" YANG modules; see
// [RFC 8519](https://rfc-editor.org/rfc/rfc8519).
//
// Several additional specifications have been included in an attempt
// to craft a reasonably general "packet description" message. This
// message is intended to be of use when specifying exact values for
// structured fields within a packet, e.g. describing an MPLS label
// stack or describing layers of tunneling encapsulation. It can also
// be used in general traffic matching contexts, i.e. by making use
// of various "mask" and "range" extensions in some `<Foo>Fields`
// messages.
//
// Many standards groups define their own packet classification approach
// and encodings for same. The ACL-inspired match constructs below aim
// to be practical superset of traffic classification needs.
//
// Additional SDO-specific classifiers could easily be added in
// other proto files and referenced by relevant Entities.
//
// To build an outline of the contents of a packet, whether for
// matching traffic or specifying encapsulation parameters, etc.,
// assemble a list of `Field`s in order with the required detail.
//
// All fields set within an individual `<Foo>Fields` instance are
// expected to be applied or considered together (AND'd). Whether a
// field is set appropriately for matching may not always be possible
// to determine. If the zero-value of an element is reserved in the
// protocol, then this may be interpreted as unset. If an element's
// protobuf type differs from its wire format type it may be feasible
// to differentiate, e.g. an element represented here by a `string`
// may be interpreted as unset if it is emtpy. Richer matching
// semantics may require additional, separate structures like use of
// `FieldMask`s to indicate field match inclusion.
//
//   https://protobuf.dev/reference/protobuf/google.protobuf/#field-mask
//
// Those structures can still refer to base packet descriptions here.

message PacketDescription {
  message EthernetFields {
    types.ieee.MacAddress src_mac = 1;
    types.ieee.MacAddress src_mask = 2;  // For packet matching contexts.

    types.ieee.MacAddress dst_mac = 3;
    types.ieee.MacAddress dst_mask = 4;  // For packet matching contexts.
  }

  // IEEE 802.1Q-2022 Section 9.6
  message VlanFields {
    // The VLAN ID.
    //
    // Whether C-VLAN or S-VLAN or otherwise is indicated
    // by an EtherType grouped near this match element.
    // Absent any additional context, C-VLAN SHOULD be assumed.
    oneof type {
      types.ieee.VlanId vid = 1;
      types.ieee.VlanIdRange range = 2;  // For packet matching contexts only.
    }

    // TODO: Consider PCP.
    // TODO: Consider DEI.
  }

  // IEEE 802.1Q-2022 Section 9.7
  message ItagFields {
    uint32 i_sid = 1;  // 24-bit Service Instance Identifier

    // TODO: Consider PCP.
    // TODO: Consider DEI.

    types.ieee.MacAddress cust_src_mac = 2;
    types.ieee.MacAddress cust_src_mask = 3;  // For packet matching contexts.

    types.ieee.MacAddress cust_dst_mac = 4;
    types.ieee.MacAddress cust_dst_mask = 5;  // For packet matching contexts.
  }

  // [RFC 3032](https://rfc-editor.org/rfc/rfc3032)
  message MplsLabelStackEntry {
    uint32 label = 1;  // restricted to unsigned 20-bit values
    // TODO: Consider https://rfc-editor.org/rfc/rfc5462 field.
    // traffic_class = 2;
    bool s = 3;
  }

  // [RFC 826](https://rfc-editor.org/rfc/rfc826)
  message ArpFields {
    // TODO
  }

  // [RFC 791](https://rfc-editor.org/rfc/rfc791)
  message IPv4Fields {
    types.ietf.IPv4Prefix src = 1;
    types.ietf.IPv4Prefix dst = 2;

    // IP "protocol" or "next header" field.
    //
    // Note that proto3's default zero-value semantics mean that
    // matching IPv6 Hop-by-Hop headers is (at best) non-trivial.
    // Hopefully it's equally as unnecessary.
    //
    // Optional; if needed, this field may well be inferred from other
    // field description messages having settings at other layers.
    types.iana.IpProto ip_proto = 3;

    // TODO: Consider DSCP.

    // TODO: Consider ECN, though this might be of low utility in
    // flow classification contexts (e.g. SD-WAN service definition).
  }

  // [RFC 792](https://rfc-editor.org/rfc/rfc792)
  message ICMPv4Fields {
    // TODO: consider whether/how to represent `type` and `code`.
    //
    // Both are 8-bit unsigned integers, but have a plethora of
    // IANA-assigned values, which might be accomodated in a future
    // representation implementation.
  }

  // [RFC 8200](https://rfc-editor.org/rfc/rfc8200)
  message IPv6Fields {
    types.ietf.IPv6Prefix src = 1;
    types.ietf.IPv6Prefix dst = 2;

    // IP "protocol" or "next header" field.
    //
    // Note that proto3's default zero-value semantics mean that
    // matching IPv6 Hop-by-Hop headers is (at best) non-trivial.
    // Hopefully it's equally as unnecessary.
    //
    // Optional; if needed, this field may well be inferred from other
    // field description messages having settings at other layers.
    types.iana.IpProto ip_proto = 3;

    types.ietf.IPv6FlowLabel flow_label = 4;

    // TODO: Consider DSCP.

    // TODO: Consider ECN, though this might be of low utility in
    // flow classification contexts (e.g. SD-WAN service definition).
  }

  // [RFC 4443](https://rfc-editor.org/rfc/rfc4443)
  message ICMPv6Fields {
    // TODO: consider whether/how to represent `type` and `code`.
    //
    // Both are 8-bit unsigned integers, but have a plethora of
    // IANA-assigned values, which might be accomodated in a future
    // representation implementation.
  }

  // Generic Routing Encapsulation
  //
  // [RFC 2784](https://rfc-editor.org/rfc/rfc2784)
  // [RFC 2890](https://rfc-editor.org/rfc/rfc2890)
  message GreFields {
    // Optional; if needed, this field may well be inferred from other
    // field description messages having settings at other layers.
    types.ieee.EtherType proto = 5;

    uint32 key = 2;
  }

  // IPv6 Segment Routing Header (SRH)
  //
  // [RFC 8754](https://www.rfc-editor.org/rfc/rfc8754)
  message SrhFields {
    repeated types.ietf.IPv6Address sid = 1;

    // IP "protocol" or "next header" field.
    //
    // Note that proto3's default zero-value semantics mean that
    // matching IPv6 Hop-by-Hop headers is (at best) non-trivial.
    // Hopefully it's equally as unnecessary.
    //
    // Optional; if needed, this field may well be inferred from other
    // field description messages having settings at other layers.
    types.iana.IpProto ip_proto = 2;
  }

  // IP Authentication Header (AH)
  //
  // [RFC 4302](https://rfc-editor.org/rfc/rfc4302)
  message AhFields {
    // Security Parameters Index (SPI)
    uint32 spi = 1;
  }

  // IP Encapsulating Security Payload (ESP) header
  //
  // [RFC 4303](https://rfc-editor.org/rfc/rfc4303)
  message EspFields {
    // Security Parameters Index (SPI)
    uint32 spi = 1;
  }

  // Transmission Control Protocol (TCP)
  //
  // [RFC 9293](https://rfc-editor.org/rfc/rfc9293)
  message TcpFields {
    oneof src {
      types.ietf.PortNum src_port = 1;
      types.ietf.PortNumRange src_range = 2;  // For packet matching contexts.
    }
    oneof dst {
      types.ietf.PortNum dst_port = 3;
      types.ietf.PortNumRange dst_range = 4;  // For packet matching contexts.
    }
  }

  // User Datagram Protocol (UDP)
  //
  // [RFC 768](https://rfc-editor.org/rfc/rfc768)
  message UdpFields {
    oneof src {
      types.ietf.PortNum src_port = 1;
      types.ietf.PortNumRange src_range = 2;  // For packet matching contexts.
    }
    oneof dst {
      types.ietf.PortNum dst_port = 3;
      types.ietf.PortNumRange dst_range = 4;  // For packet matching contexts.
    }
  }

  // Datagram Congestion Control Protocol (DCCP)
  //
  // [RFC 4340](https://rfc-editor.org/rfc/rfc4340)
  message DccpFields {
    oneof src {
      types.ietf.PortNum src_port = 1;
      types.ietf.PortNumRange src_range = 2;  // For packet matching contexts.
    }
    oneof dst {
      types.ietf.PortNum dst_port = 3;
      types.ietf.PortNumRange dst_range = 4;  // For packet matching contexts.
    }
  }

  // Stream Control Transmission Protocol (SCTP)
  //
  // [RFC 9260](https://rfc-editor.org/rfc/rfc9260)
  message SctpFields {
    oneof src {
      types.ietf.PortNum src_port = 1;
      types.ietf.PortNumRange src_range = 2;  // For packet matching contexts.
    }
    oneof dst {
      types.ietf.PortNum dst_port = 3;
      types.ietf.PortNumRange dst_range = 4;  // For packet matching contexts.
    }
  }

  message Field {
    oneof field {
      EthernetFields eth = 1;
      // Note: the approach here models the EtherType as a separate
      // structured field preceding its value-indicated payload.
      // Several EtherType fields may appear throughout a packet,
      // depending on the layering in use.
      types.ieee.EtherType eth_type = 2;
      VlanFields vlan = 3;
      ItagFields itag = 4;
      MplsLabelStackEntry mpls = 5;
      ArpFields arp = 6;
      IPv4Fields ipv4 = 7;
      ICMPv4Fields icmp4 = 8;
      IPv6Fields ipv6 = 9;
      ICMPv6Fields icmp6 = 10;
      GreFields gre = 11;
      SrhFields srh = 12;
      AhFields ah = 13;
      EspFields esp = 14;
      TcpFields tcp = 15;
      UdpFields udp = 16;
      DccpFields dccp = 17;
      SctpFields sctp = 18;
    }
  }
  repeated Field field = 1;
}
