// Copyright (c) Outernet Council and Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file contains messages used to model configuration parameters and 
// constraints of a set of carrier signals.

syntax = "proto3";

package nmts.v2alpha.ek.physical;

import "nmts/v2alpha/proto/ek/physical/common.proto";

option java_package = "org.outernetcouncil.nmts.v2alpha.proto.ek.physical";
option go_package = "outernetcouncil.org/nmts/v2alpha/proto/ek/physical";

// Graph structures such as
// Transmitter --RK_SUPPORTS--> CarrierConfiguration or
// Receiver --RK_SUPPORTS--> CarrierConfiguration 
// are used to indicate that a transmitter or receiver supports a set of
// carrier configurations. Many transmitters and receivers can support the same
// CarrierConfiguration. Each transmitter and receiver can have an 
// RK_SUPPORTS relationship to at most one CarrierConfiguration.
message CarrierConfiguration {
  message TransmitCarrier {
    // Required.
    Carrier carrier = 1;
    // The maximum transmit power, in watts.
    // This value further constrains the max_transmit_power_w in the
    // nmts.ek.physical.Antenna when the maximum transmit power varies with the
    // frequency of the carrier.
    double max_power_w = 2;
  }

  // A set of transmit carriers.
  // If multiple elements have the same TransmitCarrier.carrier field but each 
  // has a different TransmitCarrier.max_power_w field, the max_power_w for the
  // carrier will be determined from the first such element.
  repeated TransmitCarrier transmit_carriers = 1;

  // A set of receive carriers.
  repeated Carrier receive_carriers = 2;
}
