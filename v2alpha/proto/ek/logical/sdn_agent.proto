// Copyright (c) Outernet Council and Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package nmts.v2alpha.ek.logical;

import "google/protobuf/duration.proto";

option java_package = "org.outernetcouncil.nmts.v2alpha.proto.ek.logical";
option go_package = "outernetcouncil.org/nmts/v2alpha/proto/ek/logical";

// Entity Kind: SDN Agent (EK_SDN_AGENT)
//
// An abstract software agent that RK_CONTROLS one or more entities
// in a model instance. It exists to indicate to a consumer of a model
// which elements can receive instructions from an SDN controller, and
// allows for extremly fine-grained indication of controllable elements
// (at the level of entity instances).
//
// One EK_SDN_AGENT may RK_CONTROLS one or more of a variety of model
// entities. One list of allowed entities is maintained in this
// repository's validation go library.
//
// An EK_NETWORK_NODE may RK_CONTAINS an EK_SDN_AGENT, though this
// is not required. If such a construct is present in a model instance,
// it may be possible to characterize control plane communications that
// traverse other entities in the model (e.g. control plane channels
// that are routed over/like data plane channels).
message SdnAgent {
  // When sending updates to this agent, an SDN controller must factor
  // in the communications latency between itself and the agent. This
  // field SHOULD be kept as up-to-date as possible; otherwise schedule
  // updates for enactment times in the very near future might not
  // arrive in adequate time.
  //
  // If an agent is functioning as a proxy for an element, for example
  // a satellite, the latency for delivering enactment commands via
  // in-band channels is likely to be substantially lower than the
  // latency of out-of-band channels (e.g., a TT&C connection via some
  // future orbital pass). Strategies for setting this field incluce:
  //
  //   [1] set this latency field to the worst-case latency, or
  //   [2] update this field whenever the proxy-agent-to-satellite
  //       latency changes between in-band and out-of-band paths.
  //
  // The former might mean a controller does not command some state
  // changes when the in-band channel is working because it has
  // incorrectly evaluated that the commands cannot be implemented
  // in time. The latter approach requires continuous monitoring of
  // proxy-agent-to-satellite (for example) latency and continually
  // issuing updates to this field.
  //
  // This value is unrelated to other latency fields that affect
  // enactment timing, like the angular rate contraints present in
  // the EK_ANTENNA entity.
  google.protobuf.Duration controller_to_agent_latency = 1;
}
