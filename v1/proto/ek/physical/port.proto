// Copyright (c) Outernet Council and Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file contains messages used to model physical ports, from which signals
// originate or terminate.

syntax = "proto3";

package nmts.v1.ek.physical;

import "nmts/v1/proto/types/ietf/inet.proto";

option java_package = "org.outernetcouncil.nmts.v1.proto.ek.physical";
option go_package = "outernetcouncil.org/nmts/v1/proto/ek/physical";

// Models a physical port, such as an Ethernet jack or a physical port on a
// processor or sensor, from which signals originate or terminate.
//
// This Entity should only participate in RK_ORIGINATES, RK_TERMINATES, and
// RK_TRAVERSES relationships.
// To indicate the direction in which a signal is transmitted, there should be
// an RK_ORIGINATES relationship in the following direction:
// Port --RK_ORIGINATES--> {a physical Entity}.
// To indicate the direction in which a signal is received, there should be an
// RK_TERMINATES relationship in the following direction:
// Port --RK_TERMINATES--> {a physical Entity}.
message Port {
  // The name of the port as known to the operating system on the
  // containing Platform that might need to refer to this port
  // (by this name).
  //
  // Examples include: "eth0", "mmwave2", "GigabitEthernet1/0/1", etc.
  string name = 1;

  // An "interface index", vis. RFC 8343 Section 5.
  int64 if_index = 2;

  // The MTU of this EK_PORT.
  //
  // The default value (zero) implies the MTU is unset here. Some
  // default value should be assumed (likely 1500), subject to
  // any additional available context.
  int32 mtu = 3;

  // The peak information rate of this EK_PORT, in bits per second.
  //
  // See also RFC 8343 "speed" / RFC 2863 "ifSpeed" and "ifHighSpeed":
  //
  // "For interfaces that do not vary in bandwidth or for those where
  //  no accurate estimation can be made, this node should contain the
  //  nominal bandwidth. For interfaces that have no concept of
  //  bandwidth, this ... is not present."
  //
  // The actual speed of an EK_PORT may be further constrained by speed
  // values given in any EK_PHYSICAL_MEDIUM_LINKs to which it is
  // connected.
  //
  // Default value (zero) implies the speed is unset. A default speed or
  // explicit zero value MAY be assumed, depending on context.
  int64 max_data_rate_bps = 4;

  // Interface/port administrative and operational states; cf. RFC 8343.
  //
  // It is RECOMMENDED that administrative status be kept up-to-date in
  // conjuction with administrative actions, either as a consequence of
  // or a trigger for such action (in cases where changes to the model
  // results in enactments within the modeled network).
  types.ietf.IfAdminStatus admin_status = 5;

  reserved 6 to max;
}
