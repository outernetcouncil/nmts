/**
 * Copyright (c) Outernet Council and Contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 # limitations under the License.
*/

/* Declare the xlink namespace so we can use xlink: attributes in selectors. */
@namespace xlink 'http://www.w3.org/1999/xlink';

/* Import Roboto font and use it for all text */
@import url(https://fonts.googleapis.com/css?family=Roboto:400);
svg text {
  font-family: 'Roboto';
  font-size: 12px;
  stroke-width: 0 !important;
}

/* Hide polygons that obscure entire node tables (b/73950430). */
g.node g+polygon:last-child,
g.node text+polygon:last-child {
  display: none;
}

/* CLUSTER DEFAULTS: grey dashed border, grey label */
g.cluster polygon {
  stroke: #616161;
  stroke-width: 0.5;
  stroke-dasharray: 4, 4;  /* Dashed line */
}

g.cluster text {
  fill: #424242;
}

svg text {
  fill: #424242;
}

/* Style links in a linky way. */
svg a[*|href] text {
  fill: rgba(0, 1, 0, 0.8);
  text-decoration: underline;
}
svg a[*|href]:hover text {
  fill: rgba(0, 1, 0, 0.6);
  cursor: pointer;
}

/* NODE DEFAULTS */
g.node polygon,
g.node ellipse,
g.node polyline {
  stroke-width: 0.5;
}

/* EDGE DEFAULTS */
g.edge polygon,
g.edge ellipse {  /* Arrowhead */
  stroke-width: 0;
  fill: #616161;
  stroke: #616161;
}
g.edge polygon[fill=none] {  /* Open arrowhead (e.g. "onormal") */
  stroke-width: 0.5;
  fill: none !important;
}
g.edge path { /* Arrow line */
  stroke-width: 0.5;
  stroke: #616161;
}

/* NODE COLORS.
 * Each color comes in three flavors:
 * <color> (light)
 * <color dark> (dark with white text)
 * Yes, these selectors are inefficient. No, it doesn't matter for docs.
 */

/* "Default" (light-colored) nodes.  Fill is 50 shade, stroke is 300. */
g.node :not(text),
g.node[id~="teal"] :not(text),
g.node.teal :not(text) {
  fill: #e0f2f1;
  stroke: #4db6ac;
}
g.node[id~="pink"] :not(text),
g.node.pink :not(text) {
  fill: #fce4ec;
  stroke: #f06292;
}
g.node[id~="purple"] :not(text),
g.node.purple :not(text) {
  fill: #f3e5f5;
  stroke: #ba68c8;
}
g.node[id~="deeppurple"] :not(text),
g.node.deeppurple :not(text) {
  fill: #ede7f6;
  stroke: #9575cd;
}
g.node[id~="indigo"] :not(text),
g.node.indigo :not(text) {
  fill: #e8eaf6;
  stroke: #7986cb;
}
g.node[id~="orange"] :not(text),
g.node.orange :not(text)  {
  fill: #fff3e0;
  stroke: #ffb74d;
}
g.node[id~="grey"] :not(text),
g.node.grey :not(text) {
  fill: #efefef;
  stroke: #bdbdbd;
}
g.node[id~="bluegrey"] :not(text),
g.node.bluegrey :not(text) {
  fill: #eceff1;
  stroke: #90a4ae;
}
g.node[id~="googlegreen"] :not(text),
g.node.googlegreen :not(text) {
  fill: #e2f3eb;
  stroke: #57bb8a;
}
g.node[id~="googleblue"] :not(text),
g.node.googleblue :not(text) {
  fill: #e8f0fe;
  stroke: #7baaf7;
}
g.node[id~="googleyellow"] :not(text),
g.node.googleyellow :not(text) {
  fill: #fef6e0;
  stroke: #f7cb4d;
}
g.node[id~="googlered"] :not(text),
g.node.googlered :not(text) {
  fill: #fbe9e7;
  stroke: #e67c73;
}
g.node[id~="white"] :not(text),
g.node.white :not(text) {
  fill: #fff;
  stroke: #757575;
}

/* Dark shades.  Fill is 500 except where noted. */
g.node[id~="teal"][id~="dark"] :not(text),
g.node.dark.teal :not(text) {
  fill: #009688;
}
g.node[id~="googlegreen"][id~="dark"] :not(text),
g.node.dark.googlegreen :not(text) {
  fill: #0f9d58;
}
g.node[id~="googleblue"][id~="dark"] :not(text),
g.node.dark.googleblue :not(text) {
  fill: #4285f4;
}
g.node[id~="googleyellow"][id~="dark"] :not(text),
g.node.dark.googleyellow :not(text) {
  fill: #f9a825;  /* Yellow 800 */
}
g.node[id~="googlered"][id~="dark"] :not(text),
g.node.dark.googlered  :not(text) {
  fill: #db4437;
}
g.node[id~="pink"][id~="dark"] :not(text),
g.node.dark.pink :not(text) {
  fill: #e91e63;
}
g.node[id~="purple"][id~="dark"] :not(text),
g.node.dark.purple :not(text) {
  fill: #9c27b0;
}
g.node[id~="deeppurple"][id~="dark"] :not(text),
g.node.dark.deeppurple :not(text) {
  fill: #673ab7;
}
g.node[id~="indigo"][id~="dark"] :not(text),
g.node.dark.indigo :not(text) {
  fill: #3f51b5;
}
g.node[id~="orange"][id~="dark"] :not(text),
g.node.dark.orange :not(text) {
  fill: #e65100;  /* Orange 900 */
}
g.node[id~="grey"][id~="dark"] :not(text),
g.node.dark.grey :not(text) {
  fill: #616161;  /* Grey 700 */
}
g.node[id~="bluegrey"][id~="dark"] :not(text),
g.node.dark.bluegrey :not(text) {
  fill: #607d8b;
}
g.node[id~="black"] :not(text),
g.node.black :not(text) {
  fill: #212121;
  stroke: #757575;
}

/* Use white text on dark nodes (black text is default). */
g.node[id~="dark"] text,
g.node[id~="black"] text,
g.node.dark text,
g.node.black text {
  fill: white;
}
g.node[id~="dark"] a text,
g.node[id~="black"] a text,
g.node.dark a text,
g.node.black a text {
  fill: rgba(255, 255, 255, 0.87);
}
g.node[id~="dark"] a text:hover,
g.node[id~="black"] a text:hover,
g.node.dark a text:hover {
  fill: rgba(255, 255, 255, 0.7);
}

/* EDGE COLORS.  Generally around 700. */
g.edge[id~="teal"] *,
g.edge.teal * {
  stroke: #00796b;
}
g.edge[id~="teal"] polygon,
g.edge.teal polygon,
g.edge[id~="teal"] ellipse,
g.edge.teal ellipse {
  fill: #00796b;
}

g.edge[id~="googlegreen"] *,
g.edge.googlegreen * {
  stroke: #0b8043;
}
g.edge[id~="googlegreen"] polygon,
g.edge.googlegreen polygon,
g.edge[id~="googlegreen"] ellipse,
g.edge.googlegreen ellipse {
  fill: #0b8043;
}

g.edge[id~="googleblue"] *,
g.edge.googleblue * {
  stroke: #3367d6;
}
g.edge[id~="googleblue"] polygon,
g.edge.googleblue polygon,
g.edge[id~="googleblue"] ellipse,
g.edge.googleblue ellipse{
  fill: #3367d6;
}

g.edge[id~="googleyellow"] *,
g.edge.googleyellow * {
  stroke: #f09300;
}
g.edge[id~="googleyellow"] polygon,
g.edge.googleyellow polygon,
g.edge[id~="googleyellow"] ellipse,
g.edge.googleyellow ellipse {
  fill: #f09300;
}

g.edge[id~="googlered"] *,
g.edge.googlered * {
  stroke: #c53929;
}
g.edge[id~="googlered"] polygon,
g.edge.googlered polygon,
g.edge[id~="googlered"] ellipse,
g.edge.googlered ellipse {
  fill: #c53929;
}

g.edge[id~="pink"] *,
g.edge.pink * {
  stroke: #c2185b;
}
g.edge[id~="pink"] polygon,
g.edge.pink polygon,
g.edge[id~="pink"] ellipse,
g.edge.pink ellipse {
  fill: #c2185b;
}

g.edge[id~="purple"] *,
g.edge.purple * {
  stroke: #7b1fa2;
}
g.edge[id~="purple"] polygon,
g.edge.purple polygon,
g.edge[id~="purple"] ellipse,
g.edge.purple ellipse {
  fill: #7b1fa2;
}

g.edge[id~="deeppurple"] *,
g.edge.deeppurple * {
  stroke: #512da8;
}
g.edge[id~="deeppurple"] polygon,
g.edge.deeppurple polygon,
g.edge[id~="deeppurple"] ellipse,
g.edge.deeppurple ellipse {
  fill: #512da8;
}

g.edge[id~="indigo"] *,
g.edge.indigo * {
  stroke: #303f9f;
}
g.edge[id~="indigo"] polygon,
g.edge.indigo polygon,
g.edge[id~="indigo"] ellipse,
g.edge.indigo ellipse {
  fill: #303f9f;
}

g.edge[id~="orange"] *,
g.edge.orange * {
  stroke: #f57c00;
}
g.edge[id~="orange"] polygon,
g.edge.orange polygon,
g.edge[id~="orange"] ellipse,
g.edge.orange ellipse {
  fill: #f57c00;
}

g.edge[id~="grey"] *,
g.edge.grey * {
  stroke: #616161;
}
g.edge[id~="grey"] polygon,
g.edge.grey polygon,
g.edge[id~="grey"] ellipse,
g.edge.grey ellipse {
  fill: #616161;
}

g.edge[id~="bluegrey"] *,
g.edge.bluegrey * {
  stroke: #455a64;
}
g.edge[id~="bluegrey"] polygon,
g.edge.bluegrey polygon,
g.edge[id~="bluegrey"] ellipse[fill="black"],
g.edge.bluegrey ellipse {
  fill: #455a64;
}

g.edge ellipse[fill="none"],
g.edge polygon[fill="none"] {
  fill: transparent;
  stroke-width: 1;
}

/* Outline-less graph cluster class/ID */
g.cluster[id~="no-outline"] polygon,
g.cluster.no-outline polygon {
  stroke-width: 0;
}

/* Solid outline for graph clusters class/ID */
g.cluster[id~="solid-outline"] polygon,
g.cluster.solid-outline polygon {
  stroke-dasharray: unset;
}
