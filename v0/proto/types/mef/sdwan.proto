// Copyright (c) Outernet Council and Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///
// Various MEF-related SD-WAN definitions.
//
// Elements here are derived from MEF specifications.
// Per copyright text: "Reproduced with permission of MEF Forum."
///

syntax = "proto3";

package nmts.types.mef;

option java_package = "org.outernetcouncil.nmts.proto.types.mef";

///
// MEF 70.2
//   "SD-WAN Service Attributes and Service Framework"
//   https://www.mef.net/wp-content/uploads/MEF-70.2.pdf
//
// A Subscriber connects to an SD-WAN Provider at a UNI
// (User Network Interface). SD-WAN services are IP Layer 3
// routed/forwarded services, as directed by classification of
// application traffic and applicaton of requested policies to the
// ingressing/egressing traffic.
//
// Ingress IP packets can be forwarded at most one egress UNI, ergo
// we ignore multicast/broadcast as a service option (for now).
///

message SdwanService {
  // one virtual connection, with attributes
  // one or more SdwanUni elements
  repeated SdwanUni unis = 2;
  // one end point per UNI, with attributes
  // match UCS specifications
}

// The User Network Interface.
//
// Multiple MEF documents define UNIs for different services offered at
// different layers. Each such UNI definition has its own type.

// See MEF 70.2 S7.4, S11.
message SdwanUni {
  string id = 1;
}

message SdwanVirtualConnectionPolicy {
  string name = 1;

  // Encryption required; MEF 70.2 Table 5.
  enum Encryption {
    ENCRYPTION_UNSPECIFIED = 0;
    ENCRYPTION_REQUIRED_ALWAYS = 1;
    ENCRYPTION_REQUIRED_PUBLIC_ONLY = 2;
    ENCRYPTION_REQUIRED_OPTIONAL = 3;
  }
  Encryption encryption = 2;

  // Internet-breakout permitted; MEF 70.2 Table 5.
  enum InternetBreakout {
    INTERNET_BREAKOUT_UNSPECIFIED = 0;
    INTERNET_BREAKOUT_DISABLED = 1;
    INTERNET_BREAKOUT_ENABLED = 2;
  }
  InternetBreakout internet_breakout = 3;

  // "Public-Private" constraint; MEF 70.2 Table 5.
  enum InternetTraversal {
    INTERNET_TRAVERSAL_UNSPECIFIED = 0;
    INTERNET_TRAVERSAL_EITHER = 1;
    INTERNET_TRAVERSAL_PRIVATE_ONLY = 2;
  }
  InternetTraversal internet_traversal = 4;

  enum BillingMethod {
    BILLING_METHOD_UNSPECIFIED = 0; // Either
    BILLING_METHOD_FLAT_RATE_ONLY = 1;
    BILLING_METHOD_USAGE_BASED_ONLY = 2;
  }
  BillingMethod billing_method = 5;

  // TODO: Table 6 policies.

  message Performance {
    // "latency"; See section 13.3
    double one_way_mean_packet_delay = 1;
    // "jitter"; See section 13.4
    double one_way_mean_packet_delay_variation = 2;
    // See section 13.5
    double one_way_packet_loss_ratio = 3;
  }
}

message FlowMatchEntry {
  message MatchIp4PrefixList {
    repeated string v4prefixes = 1; // TODO: proper types.ietf message type
  }
  message MatchIp6PrefixList {
    repeated string v6prefixes = 1; // TODO: proper types.ietf message type
  }

  oneof entry {
    MatchIp4PrefixList src4 = 1;
    MatchIp4PrefixList dst4 = 2;
    MatchIp6PrefixList src6 = 3;
    MatchIp6PrefixList dst6 = 4;
    // next hop protocol
    // src/dst ports
    // ipv6 flow label
    // DSCP
  }
}

message FlowMatch {
  repeated FlowMatchEntry match_rules = 1;
}

// message ApplicationFlow
// message ApplicationFlowPolicy

///
// MEF 63
//   "Layer 1 Service Attributes"
///
