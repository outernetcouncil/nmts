// Copyright (c) Outernet Council and Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package nmts.v1alpha.ek.logical;

import "google/protobuf/duration.proto";
import "nmts/v1alpha/proto/types/ietf/routing.proto";

option java_package = "org.outernetcouncil.nmts.v1alpha.proto.ek.logical";
option go_package = "outernetcouncil.org/nmts/v1alpha/proto/ek/logical";

// Entity Kind: Logical Packet Link (`EK_LOGICAL_PACKET_LINK`)
//
// Represents a unicast channel between two peers capable of carrying
// datagrams.  The channel may define what kinds of payloads it can
// carry in general, and additional constraints (flow specifications,
// FIB policies, etc) may be applied at the `EK_INTERFACE` ends.
message LogicalPacketLink {
  // Peak information rate (PIR) of this link in bits per second.
  //
  // The default value of 0 means "unspecified", not zero bps, unless
  // this link is the lowest layer in a stack (i.e. there is no other
  // EK_LOGICAL_PACKET_LINK or EK_PHYSICAL_MEDIUM_LINK that this link
  // RK_TRAVERSES). Link speed MAY be inferred from EK_INTERFACEs that
  // RK_ORIGINATES/RK_TERMINATES this link, depending on context.
  uint64 max_data_rate_bps = 1;

  // Latency (one-way frame delay).
  google.protobuf.Duration latency = 3;

  // TODO: move this info out into an EK_NEXT_HOP entity which
  // has a clear relationship with an EK_ROUTE_FN, so that the
  // adjacency SIDs are associated with a given IP VRF.
  //
  // TODO: figure out a proper model for RIBs/FIBs/LFIBs.
  message SegmentRouting {
    bool enabled = 1;

    // The (primary) Segment Routing Adjaceny SID assigned to this
    // link by the router than `RK_CONTAINS` the `EK_INTERFACE` that
    // `RK_ORIGINATES` this link.
    types.ietf.SegmentId adjacency_sid = 2;

    // Maximum SID Depth, specifically the RFC 8491 Link MSD-Type value.
    //
    // The proto3-default value of zero means no max SID depth is given.
    // A modeling implementation MAY apply a default max SID depth.
    //
    // See also RFCs 8476, 8491, 8664, and 8814.
    uint32 max_sid_depth = 3;
  }
  SegmentRouting sr = 2;

  reserved 4 to 9;

  // LogicalPacketLink payload type.
  //
  // There are many kinds of logical packet links, organized here
  // according to payload they naturally carry. Details pertinent a
  // link may also be found in the `EK_INTERFACE`s that form the
  // endpoints.

  message EthernetPayload {
  }
  message EtherTypePayload {
  }
  message MplsPayload {
  }
  message IpPayload {
  }
  message IpProtoPayload {
  }

  oneof payload {
    EthernetPayload eth = 10;
    EtherTypePayload ethertype = 11;
    MplsPayload mpls = 12;
    IpPayload ip = 13;
    IpProtoPayload ip_proto = 14;
  }
}
